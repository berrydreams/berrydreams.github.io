{"posts":[{"title":"分布式存储学习(一)--Ceph","text":"参考资料官方文档第1章 Ceph 架构 | Red Hat DocumentationRADOS - A Scalable, Reliable Storage Service for Petabyte-scale Storage Clusters 架构Ceph数据来自Ceph Client，通过Ceph Block Device、Ceph Object Storage、Ceph File System或者通过librados自定义的实现，最后被Ceph Storage Cluster接收，以RADOS objects的形式存储。 Ceph OSD Daemon将数据存储为平面名称空间中的对象。这意味着对象不存储在目录的层次结构中。对象具有由键值对组成的标识符、二进制数据和元数据。 Ceph Storage ClusterCeph提供了一个基于RADOS的可无限扩展的Ceph存储集群，RADOS是一种可靠的分布式存储服务，它使用其每个节点中的服务来保护其存储的数据，并将这些数据提供给客户机。 Ceph Storage Cluster由如下守护进程组成： Ceph Monitor Ceph OSD Daemon Ceph Manager Ceph Metadata Server Ceph Monitor保存了Ceph集群的所有Map的一个副本，供Ceph Client查看。存在多个monitor以保证集群高可用。Ceph OSD Daemon提供自身和其他OSD的状态数据，并将其返回给Monitor。Ceph Monitor充当监控、编排和拓展插件的端点。Ceph Metadata Server在CephFS被使用提供文件服务时存储文件的源数据。 Cluster Map集群的拓扑信息以Cluster Map的形式存储，以便client和OSD获取当前集群状态。Map是由 算法原理Crush算法","link":"/2025/03/12/deepseek-3fs/"},{"title":"K8S集群搭建(kubeadm+flannel)","text":"参考资料Docker docs安装kubeadm ｜ Kubernetescri-docker githubFlannel github 准备阶段 环境设备：单卡4060ti + 4090系统：ubuntu 22.04 1. 安装docker123456789101112131415# Add Docker's official GPG key:sudo apt-get updatesudo apt-get install ca-certificates curlsudo install -m 0755 -d /etc/apt/keyringssudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.ascsudo chmod a+r /etc/apt/keyrings/docker.asc# Add the repository to Apt sources:echo \\ &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\ $(. /etc/os-release &amp;&amp; echo &quot;${UBUNTU_CODENAME:-$VERSION_CODENAME}&quot;) stable&quot; | \\ sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/nullsudo apt-get updatesudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin 由于当前国内无法拉取镜像，需配置代理，有两种方式 找到守护进程的代理配置/etc/systemd/system/docker.service.d/proxy.conf，进行如下修改 1234[Service]Environment=&quot;HTTP_PROXY=http://proxy.example.com:8080/&quot;Environment=&quot;HTTPS_PROXY=http://proxy.example.com:8080/&quot;Environment=&quot;NO_PROXY=localhost,127.0.0.1,.example.com&quot; 重新加载配置并重启服务 12sudo systemctl daemon-reloadsudo systemctl restart docker 配置docker配置文件 12345678910{ &quot;proxies&quot;: { &quot;default&quot;: { &quot;httpProxy&quot;: &quot;http://proxy.example.com:8080&quot;, &quot;httpsProxy&quot;: &quot;http://proxy.example.com:8080&quot;, &quot;noProxy&quot;: &quot;localhost,127.0.0.1,.example.com&quot; } }} 2. 安装cri-docker下载安装包 将可执行文件放到/usr/bin或者/usr/local/bin 下载systemd默认配置文件，并进行一些修改https://github.com/Mirantis/cri-dockerd/tree/master/packaging/systemd 在ExecStart添加启动参数–pod-infra-container-image设置国产镜像，这个容器是用于创建每个pod中都存在的基础设施容器pause，他是实现pod中容器共享网络和命名空间的关键 1ExecStart=/usr/bin/cri-dockerd --container-runtime-endpoint fd:// --pod-infra-container-image=registry.aliyuncs.com/google_containers/pause:3.10 3. 安装kubelet、kubectl、kubeadm1234567891011121314sudo apt-get update# apt-transport-https 可能是一个虚拟包（dummy package）；如果是的话，你可以跳过安装这个包sudo apt-get install -y apt-transport-https ca-certificates curl gpg# 如果 `/etc/apt/keyrings` 目录不存在，则应在 curl 命令之前创建它，请阅读下面的注释。# sudo mkdir -p -m 755 /etc/apt/keyringscurl -fsSL https://pkgs.k8s.io/core:/stable:/v1.xx/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg# 此操作会覆盖 /etc/apt/sources.list.d/kubernetes.list 中现存的所有配置。echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.xx/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.listsudo apt-get updatesudo apt-get install -y kubelet kubeadm kubectlsudo apt-mark hold kubelet kubeadm kubectl （可选）配置docker代理修改/etc/systemd/system/docker.service.d或者/usr/lib/systemd/system/docker.service.d下的http-proxy.conf 1234[Service]Environment=&quot;HTTP_PROXY=http://your-proxy-server:port&quot;Environment=&quot;HTTPS_PROXY=http://your-proxy-server:port&quot;Environment=&quot;NO_PROXY=localhost,127.0.0.1,.example.com&quot; cgroups与交换空间如果linux的版本默认支持cgroupsv2，那么支持开启交换空间，否则则要关闭交换空间。 1234// 临时关闭sudo swapoff -a// 永久关闭，在/etc/fstab设置sed -ri 's/.swap./#&amp;/' /etc/fstab netfilter模块确保Linux网桥(bridge)的流量能够被iptables/ip6tables规则处理，从而保障Kubernetes的网络功能 123456cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOFnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1EOFsysctl --system # 生效 创建集群1. 创建主节点1234567891011121314kubeadm init \\ # 该节点ip地址 --apiserver-advertise-address=xx.xxx.xx.xxx \\ # k8s版本 --kubernetes-version v1.32.2 \\ # service和pod所在ip域 --service-cidr=10.96.0.0/12 \\ --pod-network-cidr=10.244.0.0/16 \\ # 选择cri-docker --cri-socket=unix:///var/run/cri-dockerd.sock \\ # 忽略所有检查错误 --ignore-preflight-errors=all \\ # 国内镜像源, 设置代理可以不配置 --image-repository=registry.aliyuncs.com/google_containers 创建成功后，会返回设置集群配置文件、添加子节点的命令。 12345678910111213141516Your Kubernetes control-plane has initialized successfully!To start using your cluster, you need to run the following as a regular user: mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/configYou should now deploy a Pod network to the cluster.Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at: /docs/concepts/cluster-administration/addons/You can now join any number of machines by running the following on each nodeas root: kubeadm join &lt;control-plane-host&gt;:&lt;control-plane-port&gt; --token &lt;token&gt; --discovery-token-ca-cert-hash sha256:&lt;hash&gt; 如果返回错误，需要先删除已有配置： 1kubeadm reset --cri-socket=unix:///var/run/cri-dockerd.sock 2. 加入子节点使用创建集群后返回的添加子节点命令将子节点添加到集群： 如果忘记命令可以再主节点执行如下命令获取： 1kubeadm token create --print-join-command 3. 配置CNICNI是容器网络插件，主要功能是实现节点间容器的网络通信，我们这里使用flannel配置集群 1kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml 如果pod网络不是默认的10.244.0.0/16，需要下载manifest进行配置，或者使用helm安装指定–set podCidr=”xx.xx.xx.xx”参数。 配置插件1. NVIDIA2. Prometheus","link":"/2025/03/12/tmp/"},{"title":"LLM推理","text":"参考资料AIBrix distributed-kv-cache KV CachevLLM内置的KV缓存（Key-Value Cache）是Transformer模型在推理（尤其是自回归文本生成）过程中优化计算效率的核心机制，其核心作用是通过缓存历史Token的注意力计算结果。","link":"/2025/03/13/LLM%E6%8E%A8%E7%90%86/"},{"title":"HTTP和HTTPS","text":"","link":"/2025/03/14/HTTP%E5%92%8CHTTPS/"},{"title":"TLS&#x2F;SSL","text":"","link":"/2025/03/14/TLS%E5%92%8CHTTPS/"}],"tags":[{"name":"kubernetes","slug":"kubernetes","link":"/tags/kubernetes/"},{"name":"Distributed System","slug":"Distributed-System","link":"/tags/Distributed-System/"},{"name":"Storage","slug":"Storage","link":"/tags/Storage/"},{"name":"Network","slug":"Network","link":"/tags/Network/"}],"categories":[{"name":"kubernetes","slug":"kubernetes","link":"/categories/kubernetes/"},{"name":"Storage","slug":"Storage","link":"/categories/Storage/"},{"name":"Network","slug":"Network","link":"/categories/Network/"}],"pages":[]}